# Text Adventure Game - Project Specifications

## Project Overview

A browser-based text adventure game in the style of 1970s/1980s Zork-style games.
Theme: Halloween Edition - "An exciting game of Trick or Treating and Suspense!"

## Technical Specifications

### Layout

- Fixed window size: 1280x720 pixels
- 5-section grid layout with 2px white borders and 10px gutters:
  1. **HEADER** - Full width, 120px height, centered text
  2. **TEXT** - 3/4 width, main content area
  3. **ASCIIART** - 1/4 width, 280px height, ASCII art display
  4. **PROMPT** - 3/4 width, 40px height, command input area
  5. **STATUS** - 1/4 width, remaining height, game status information

### Styling

- Black background with variable color text, depending on location and purpose
- Monospace font family (Courier New)
- H1 text color: orange
- All sections have white borders
- Responsive grid using CSS Grid
- PROMPT box uses yellow color (#ffcc00) to match prompt echoes

### Text Display System

- **TEXT Box Features:**
  - Scrollable content with custom green scrollbar
  - Four-color text system:
    - **Prompt Echo** (#ffcc00 yellow): User commands ("> look north")
    - **Command Output** (#1acdb2 teal): System responses (help, inventory)
    - **Flavor Text** (#00ff00 green): Story/narrative descriptions
    - **Error Text** (#ff4444 red): Invalid commands, error messages
  - Buffer system stores all game history as objects: `{text: "...", type: "prompt|command|flavor|error"}`
  - PAGE UP/DOWN scrolling (1 line at a time)
  - Auto-scroll to bottom for new content
  - Dynamic content loading from JSON files
  - HTML contains no hardcoded text content

### ASCIIART Section

- **Dedicated ASCII Art Display:**

  - Fixed grid: 60 characters wide × 32 rows tall
  - Technical specs: 8px "Courier New" monospace font, line-height: 1
  - Fixed height: 280px (no scrolling required)
  - Character-addressable grid system: each position accessible by (x, y) coordinates
  - Default state: entire grid filled with space characters (appears empty)
  - Individual character replacement capability for dynamic content
  - Grid indexing starts at position 0,0 (top-left corner)
  - Designed to support future fade-in/fade-out and animation effects
  - Independent initialization from STATUS section
  - ASCII art will be loaded from 'asciiart.json' file at program start

### STATUS Section

- **Game Status Information Display:**
  - Available commands with shortcuts
  - Current inventory with item counts
  - Game progress (treats collected, houses visited, score)
  - Scrollable content for longer lists
  - Independent initialization from ASCIIART section

### PROMPT Box and Input System

- **Input Interface:**
  - Terminal-style prompt with ">" symbol
  - Yellow text input field matching prompt echo color
  - Auto-focus on page load
- **Smart Command Processing:**
  - Prefix matching: "s", "so", "sou", "south" all match "south"
  - Single-letter priority shortcuts: s→south, n→north, h→help, etc.
  - Ambiguous command handling with "Did you mean..." suggestions
  - Case-insensitive command recognition
- **Command History Buffer:**
  - Up/Down arrow navigation through command history
  - Intelligent filtering: only valid commands stored
  - Duplicate prevention for stateless commands (help, inventory, look)
  - Stateful commands (movement) always stored even if repeated

### Data Architecture

- **JSON-based content system** for externalized game data
- Text buffer objects structured as: `{text: "content", type: "prompt|command|flavor"}`
- **Current Data Files:**
  - `samplePlaythrough.json` - Demo content for testing and development
  - `commands.json` - All game commands with type, shortcuts, and responses
- **Command Structure:**
  ```json
  {
    "command_name": {
      "type": "stateless|stateful",
      "shortcuts": ["single-letter shortcuts"],
      "response": [{ "text": "...", "type": "prompt|command|flavor|error" }]
    }
  }
  ```
- **Planned Future Files:**
  - `gameData.json` - Common responses, intro text, help content
  - `rooms.json` - Location descriptions and connections
  - `items.json` - Object descriptions and properties
  - 'asciiArt.json' - ASCII art used in the game

### Files Structure

- `index.html` - Main HTML structure with 5-section layout
- `textGame.css` - All styling, layout, colors, and responsive design
- `textGame.js` - Complete game engine with text buffer, command processing, input handling
- `samplePlaythrough.json` - Demo game content for testing
- `commands.json` - All game commands with smart matching and responses
- `asciiArt.json` - ASCII art data storage (planned)
- `backup/` - Incremental backup files folder

## Development Approach

- Build in very small increments
- Add minor improvements gradually
- Don't suggest new features unless asked
- Wait for user direction on each step

## Development Notes

### Backup Procedure

When John asks to create a backup:

- Backup ALL project files (index.html, textGame.css, textGame.js, etc.)
- Place backups in `/backup` folder
- Use naming convention: `<filename>.<extension>.backup##` (incrementing numbers)
- Example: `index.html.backup01`, `index.html.backup02`, etc.
