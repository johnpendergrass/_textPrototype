# Text Adventure Game Project - Continuation Notes
Date: 2025-08-31

## PROJECT OVERVIEW
Text-based adventure game in 1970s/1980s Zork style, Halloween themed: "An exciting game of Trick or Treating and Suspense!"
Browser-based, fully functional prototype with terminal-like interface.

## JOHN'S DEVELOPMENT APPROACH - CRITICAL
- Build in VERY SMALL increments with minor improvements
- Do NOT suggest or build new features until John specifies them or asks for advice
- When John said "far more incremental than that" - this is his key feedback
- John has minimal programming skills, prefers simple self-contained apps
- ALWAYS backup files when requested using naming convention: filename.extension.backup##

## BACKUP SYSTEM ESTABLISHED
- Convention: filename.extension.backup## (backup01, backup02, etc.)
- Store in /backup folder
- Current version: backup04 files created for index.html, textGame.css, textGame.js
- John will ask to "backup those files" - do this for any files being modified

## CURRENT PROJECT STATE
Fully functional text adventure game prototype with:
- Fixed 1280x720px layout (4 sections: HEADER, TEXT, PROMPT, STATUS)
- Smart command processing with prefix matching and shortcuts
- Command history with intelligent filtering (no invalid commands, no duplicate stateless)
- Color-coded text system (yellow prompts, teal commands, green flavor, red errors)
- JSON-based data architecture (samplePlaythrough.json, commands.json)
- ASCII art display system in STATUS box
- Scrollable text buffer with custom scrollbar

## KEY TECHNICAL DECISIONS MADE
- CSS Grid for layout with specific proportions
- Text buffer uses object structure: {text: "...", type: "prompt|command|flavor|error"}
- Command matching: exact → shortcuts → prefix (2+ chars) → ambiguous/unknown
- Single-letter shortcuts have priority: 's' always means 'south'
- Stateless commands (like 'help', 'look') don't duplicate in history
- Native scrolling (user changed from 4 lines to 1 line per scroll)

## RECENT BUG FIXED
[object Object] display issue - fixed addToBuffer() function to properly handle pre-formatted objects

## FILES STRUCTURE
- index.html - main layout with grid sections
- textGame.css - styling with color system and custom scrollbar
- textGame.js - complete game engine with buffer/command/input systems
- commands.json - command definitions with types and responses
- samplePlaythrough.json - demo content for testing
- specifications.md - comprehensive technical documentation
- /backup folder - contains backup## versions of files

## USER FEEDBACK PATTERNS
- "far more incremental" - don't suggest multiple features at once
- Specific about shortcuts: 's' = south, 'sa'/'sav'/'save' = save
- Direct file edits: changed scroll amount from 4 to 1 line
- Wants all commands validated before adding to history

## LAST COMPLETED TASK
Created backup04 files for index.html, textGame.css, and textGame.js

## NEXT SESSION APPROACH
1. Read this file first to understand context
2. Ask what small increment John wants to work on next
3. Follow his incremental development approach
4. Create backups when requested using established convention
5. Reference specifications.md for technical details as needed

## IMPORTANT REMINDERS
- John prefers functional programming but not strict
- Minimal git skills - remind about backups frequently
- No feature suggestions unless asked
- Keep improvements very small and targeted
- Always confirm backup naming and location